#*************** KAFKA needs to deploy only after ZOOKEEPER STATEFULSET is deployed and running ********#
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: kafka
  namespace: kafka
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: kafka
---
# kafka Config map
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-scripts
  namespace: "kafka"
  labels:
    app: kafka
    env: prod
data:
  setup.sh: |-
    #!/bin/bash

    ID="${MY_POD_NAME#"kafka-"}"
    if [[ -f "/bitnami/kafka/data/meta.properties" ]]; then
        export KAFKA_CFG_BROKER_ID="$(grep "broker.id" /bitnami/kafka/data/meta.properties | awk -F '=' '{print $2}')"
    else
        export KAFKA_CFG_BROKER_ID="$((ID + 0))"
    fi
    exec /entrypoint.sh /run.sh
---
# kafka headless service
apiVersion: v1
kind: Service
metadata:
  name: kafka-headless
  namespace: "kafka"
  labels:
    app: kafka
    env: prod
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-client
      port: 9092
      protocol: TCP
      targetPort: kafka-client
    - name: tcp-internal
      port: 9093
      protocol: TCP
      targetPort: kafka-internal
  selector:
    app: kafka
---
# kafka service
apiVersion: v1
kind: Service
metadata:
  name: kafka-external
  namespace: "kafka"
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-ip-address-type: ipv4
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "Name=kafka-cluster"
    service.beta.kubernetes.io/aws-load-balancer-security-groups: sg-1
    service.beta.kubernetes.io/aws-load-balancer-subnets: subnet-1,subnet-2,subnet-3
    external-dns.alpha.kubernetes.io/hostname: kafka-cluster.steblynskyi.com
  labels:
    app: kafka
    env: prod
spec:
  type: LoadBalancer
  sessionAffinity: None
  ports:
    - name: tcp-kafka
      port: 9094
      protocol: TCP
      targetPort: kafka-external
  selector:
    app: kafka
---
# Source: kafka/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: "kafka"
  labels:
      app: kafka
      env: prod
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 9092
      protocol: TCP
      targetPort: kafka-client
  selector:
    app: kafka
    env: prod
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-jmx-metrics
  namespace: "kafka"
  labels:
    app: kafka-jmx-metrics
    env: prod
  annotations:
    steblynskyi.io/scrape: "true"
    kafka.io/metric_path: "/"
    kafka.io/scrape_port: '5556'
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http-metrics
      port: 5556
      protocol: TCP
      targetPort: metrics
  selector:
    app: kafka
    env: prod
---
# Kafka stateful set
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: "kafka"
  labels:
    app: kafka
    env: prod
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app: kafka
      env: prod
  serviceName: kafka-headless
  updateStrategy:
    rollingUpdate: { }
    type: RollingUpdate
  template:
    metadata:
      name: kafka
      labels:
        app: kafka
        env: prod
    spec:
      hostNetwork: false
      hostIPC: false
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: kafka
                namespaces:
                  - "kafka"
                topologyKey: kubernetes.io/hostname
              weight: 1
      securityContext:
        fsGroup: 1001
      imagePullSecrets:
        - name: steblynskyi
      containers:
        - name: kafka
          image: docker.io/bitnami/kafka:3.2.1-debian-11-r9
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          env:
            - name: BITNAMI_DEBUG
              value: "true"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: "zookeeper"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INTERNAL"
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT"
            - name: KAFKA_CFG_LISTENERS
              value: "INTERNAL://:9093,CLIENT://:9092,EXTERNAL://:9094"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "INTERNAL://$(MY_POD_NAME).kafka-headless.kafka.svc.cluster.local:9093,CLIENT://$(MY_POD_NAME).kafka-headless.kafka.svc.cluster.local:9092,EXTERNAL://$(MY_POD_NAME).kafka-headless.kafka.svc.cluster.local:9094"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_ZOOKEEPER_PROTOCOL
              value: PLAINTEXT
            - name: JMX_PORT
              value: "5555"
            - name: KAFKA_VOLUME_DIR
              value: "/bitnami/kafka"
            - name: KAFKA_LOG_DIR
              value: "/bitnami/kafka/logs"
            - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
              value: "false"
            - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx1024m -Xms1024m"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES
              value: "10000"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MS
              value: "1000"
            - name: KAFKA_CFG_LOG_RETENTION_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_RETENTION_CHECK_INTERVALS_MS
              value: "300000"
            - name: KAFKA_CFG_LOG_RETENTION_HOURS
              value: "168"
            - name: KAFKA_CFG_MESSAGE_MAX_BYTES
              value: "11534336"
            - name: KAFKA_CFG_LOG_SEGMENT_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: "2"
            - name: KAFKA_CFG_NUM_IO_THREADS
              value: "8"
            - name: KAFKA_CFG_NUM_NETWORK_THREADS
              value: "3"
            - name: KAFKA_CFG_NUM_PARTITIONS
              value: "1"
            - name: KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR
              value: "1"
            - name: KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES
              value: "11534336"
            - name: KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_MAX_REQUEST_SIZE
              value: "2147483647"
            - name: KAFKA_CFG_MAX_PARTITION_FETCH_BYTES
              value: "2147483647"
            - name: KAFKA_CFG_PRODUCER_MAX_REQUEST_SIZE
              value: "11534336"
            - name: KAFKA_CFG_CONNECT_PRODUCER_MAX_REQUEST_SIZE
              value: "11534336"
            - name: KAFKA_CFG_FETCH_MESSAGE_MAX_BYTES
              value: "11534336"
            - name: KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS
              value: "6000"
            - name: KAFKA_CFG_AUTHORIZER_CLASS_NAME
              value: ""
            - name: KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND
              value: "true"
            - name: KAFKA_CFG_SUPER_USERS
              value: "User:admin"
          ports:
            - name: kafka-client
              containerPort: 9092
            - name: kafka-internal
              containerPort: 9093
            - name: kafka-external
              containerPort: 9094
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 9999
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          resources:
            limits: { }
            requests: { }
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
            - name: log4j-kafka
              mountPath: /bitnami/kafka/config/
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
        - name: jmx-exporter
          image: docker.io/bitnami/jmx-exporter:0.17.0-debian-11-r30
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - java
          args:
            - -XX:+UnlockExperimentalVMOptions
            - -XX:+UseCGroupMemoryLimitForHeap
            - -XX:MaxRAMFraction=1
            - -XshowSettings:vm
            - -jar
            - jmx_prometheus_httpserver.jar
            - "5556"
            - /etc/jmx-kafka/jmx-kafka-prometheus.yml
          ports:
            - name: metrics
              containerPort: 5556
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: jmx-config
              mountPath: /etc/jmx-kafka
        - name: kafka-health-check
          image: steblynskyi-docker.jfrog.io/kafka-broker-health-check:v1
          imagePullPolicy: IfNotPresent
          ports:
            - name: health
              containerPort: 9999
          resources:
            requests:
              cpu: 25m
              memory: 32Mi
            limits:
              cpu: 150m
              memory: 256Mi
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: KAFKA_BROKER
            value: "localhost:9092"
          - name: HEALTHCHECK_TOPIC_NAME
            value: "kafka_healthchecks"
          - name: LOG_LEVEL
            value: INFO
      volumes:
        - name: scripts
          configMap:
            name: kafka-scripts
            defaultMode: 0755
        - name: jmx-config
          configMap:
            name: jmx-configuration
        - name: log4j-kafka
          configMap:
            name: log4j-kafka
        - name: logs
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "50Gi"