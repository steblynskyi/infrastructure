events {
    worker_connections 128;
}

http {

    include       mime.types;
    default_type  application/octet-stream;
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile        on;

    keepalive_timeout  65;

    include /etc/nginx/conf.d/*.conf;

    lua_package_path '~/lua/?.lua;;';
    resolver 8.8.8.8;
    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    #lua_ssl_verify_depth 5;
    # cache for discovery metadata documents
    lua_shared_dict sessions 10m;

    # cache for JWKs
    #lua_shared_dict jwks 1m;

    server {
        listen 8080;
        server_name kibana-proxy.steblynskyi.com;
        rewrite ^/$ https://kibana-proxy.steblynskyi.com/_plugin/kibana redirect;

        location / {

            set $session_cipher none; # don't need to encrypt the session content, it's an opaque identifier
            set $session_storage shm; # use shared memory
            set $session_cookie_persistent on; # persist cookie between browser sessions
            set $session_cookie_renew 3600; # new cookie every hour
            set $session_cookie_lifetime 86400; # lifetime for persistent cookies
            set $session_name sess_auth; # name of the cookie to store the session identifier in

            set $session_shm_store sessions; # name of the dict to store sessions in
            # See https://github.com/bungle/lua-resty-session#shared-dictionary-storage-adapter for the following options
            set $session_shm_uselocking off;
            set $session_shm_lock_exptime 3;
            set $session_shm_lock_timeout 2;
            set $session_shm_lock_step 0.001;
            set $session_shm_lock_ratio 1;
            set $session_shm_lock_max_step 0.5;

            access_by_lua '
            local opts = {
                redirect_uri = "https://kibana-proxy.steblynskyi.com/redirect_uri",
                discovery = "https://steblynskyi.onelogin.com/oidc/2/.well-known/openid-configuration",
                token_signing_alg_values_expected = "RS256",
                client_id = "here",
                client_secret = "here",
                redirect_after_logout_uri = "/",
                redirect_after_logout_with_id_token_hint = false,
                -- Scopes to request; group contains group memberships, offline_access gives us a refresh token
                scope = "openid email profile groups",
                renew_access_token_on_expiry = false,
                access_token_expires_leeway = 60,
                -- Storing the access token also includes the refresh token letting the server transparently
                -- renew the session
                session_contents = {id_token=true, access_token=tru}
            }

            -- Only redirect to auth page if client requests text/html, reject with 403 otherwise
            local action = "deny"
            if ngx.var.http_accept then
                for ct in (ngx.var.http_accept .. ","):gmatch("([^,]*),") do
                    if string.sub(ct, 0, 9) == "text/html" then
                        action = null
                        break
                    end
                end
            end

            -- call authenticate for OpenID Connect user authentication
            local res, err = require("resty.openidc").authenticate(opts, null, action)
            if err then
                ngx.status = 403
                ngx.say(err)
                ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            -- set data from the ID token as HTTP Request headers
            ngx.req.set_header("X-Auth-Audience", res.id_token.aud)
            ngx.req.set_header("X-Auth-Email", res.id_token.email)
            ngx.req.set_header("X-Auth-ExpiresIn", res.id_token.exp)
            ngx.req.set_header("X-Auth-Groups", res.id_token.groups)
            ngx.req.set_header("X-Auth-Name", res.id_token.name)
            ngx.req.set_header("X-Auth-Subject", res.id_token.sub)
            ngx.req.set_header("X-Auth-Userid", res.id_token.preferred_username)
            ngx.req.set_header("X-Auth-Username", res.id_token.preferred_username)
            ngx.req.set_header("X-Auth-Locale", res.id_token.locale)
            ';

            proxy_pass https://vpc-logging-prod.us-east-1.es.amazonaws.com/;
            proxy_redirect off;
            proxy_buffering off;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_ssl_server_name on;
            proxy_set_header Cache-Control no-cache;
        }
    }
}