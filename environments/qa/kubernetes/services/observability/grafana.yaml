apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: observability
  labels:
    app: grafana
    env: qa
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 25Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: observability
data:
  grafana.ini: |-

    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning

    [server]
    ;protocol = http
    ;http_addr =
    ;http_port = 3000
    ;domain = observability-grafana.qa-steblynskyi.com
    ;enforce_domain = false
    root_url = https://observability-grafana.qa-steblynskyi.com
    ;serve_from_sub_path = false
    ;router_logging = false
    ;static_root_path = public
    ;enable_gzip = false
    ;cert_file =
    ;cert_key =
    socket = /tmp/grafana.sock
    cdn_url =
    read_timeout = 0

    [auth.basic]
    enabled = true

    [auth.generic_oauth]
    name = OneLogin
    enabled = true
    allow_sign_up = true
    client_id = here
    client_secret = here
    scopes = openid email name groups
    auth_url = https://steblynskyi.onelogin.com/oidc/2/auth
    token_url = https://steblynskyi.onelogin.com/oidc/2/token
    api_url = https://steblynskyi.onelogin.com/oidc/2/me
    role_attribute_strict = true
    role_attribute_path = contains(groups[*], 'System Admins') && 'Admin' || contains(groups[*], 'Developers') && 'Viewer' || contains(groups[*], 'Grafana') && 'Viewer'
    team_ids =
    allowed_organizations =

    [log]
    ;mode = console
    ;level = debug

    [log.console]
    ;level = debug
    ;format = console

    [dataproxy]
    logging = true
    timeout = 60s
    keep_alive_seconds = 60s
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: observability
  labels:
    app: grafana
    env: qa
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      name: grafana
      labels:
        app: grafana
        env: qa
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - name: grafana
          image: grafana/grafana:9.1.6
          imagePullPolicy: Always
          ports:
            - containerPort: 80
              name: http-grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 125m
              memory: 250Mi
            limits:
              cpu: 450m
              memory: 1000Mi
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-pv
            - mountPath: /etc/grafana
              name: grafana-config
      volumes:
        - name: grafana-pv
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-config
          configMap:
            name: grafana-config
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/success-codes: 200-499
  name: grafana
  namespace: observability
  labels:
    Domain: observability-grafana.qa-steblynskyi.com
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app: grafana
    env: qa
  type: NodePort